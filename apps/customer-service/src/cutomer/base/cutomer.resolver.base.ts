/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCutomerArgs } from "./CreateCutomerArgs";
import { UpdateCutomerArgs } from "./UpdateCutomerArgs";
import { DeleteCutomerArgs } from "./DeleteCutomerArgs";
import { CutomerCountArgs } from "./CutomerCountArgs";
import { CutomerFindManyArgs } from "./CutomerFindManyArgs";
import { CutomerFindUniqueArgs } from "./CutomerFindUniqueArgs";
import { Cutomer } from "./Cutomer";
import { CutomerService } from "../cutomer.service";
@graphql.Resolver(() => Cutomer)
export class CutomerResolverBase {
  constructor(protected readonly service: CutomerService) {}

  async _cutomersMeta(
    @graphql.Args() args: CutomerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cutomer])
  async cutomers(
    @graphql.Args() args: CutomerFindManyArgs
  ): Promise<Cutomer[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Cutomer, { nullable: true })
  async cutomer(
    @graphql.Args() args: CutomerFindUniqueArgs
  ): Promise<Cutomer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cutomer)
  async createCutomer(
    @graphql.Args() args: CreateCutomerArgs
  ): Promise<Cutomer> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cutomer)
  async updateCutomer(
    @graphql.Args() args: UpdateCutomerArgs
  ): Promise<Cutomer | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cutomer)
  async deleteCutomer(
    @graphql.Args() args: DeleteCutomerArgs
  ): Promise<Cutomer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
